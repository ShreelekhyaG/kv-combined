version:  '2'

services:

  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper
    network_mode: host
    ports:
    - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    container_name: kafka
    image: wurstmeister/kafka
    ports:
    - "9092"
    depends_on:
    - "zookeeper"
    network_mode: host
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      #      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ZOOKEEPER_CONNECT: localhost:2181
    volumes:
    - '/var/run/docker.sock:/var/run/docker.sock'

  neo4j:
    container_name: neo4j
    image: neo4j:latest
    ports:
    - "7474:7474"
    - "7687:7687"
    network_mode: host
    volumes:
    - '../data/neo4j:/data/db'
    environment:
    - NEO4J_AUTH=neo4j/123456



  document-identifier:
    image: document-identifier:v1
    build: document-identifier/
    #    restart: always
    container_name: "document-identifier"
    network_mode: host
    depends_on:
    - kafka
    - mongodb
    volumes:
    - '../knowledge-vault/document-identifier/:/knowledge-vault/document-identifier/'
    ports:
    - "8080:8080"
    expose:
    - "8080"

  mongodb:
    image: mongo:3.2-jessie
    ports:
    - 27017:27017
    container_name: "mongo-knowledgevault"
    network_mode: host
    volumes:
    - '../data/mongo:/data/db'
    environment:
      MONGO_INITDB_DATABASE: mydatabase

  extractor-service:
    image: extractor-service:v1
    build: extractor-service/
    restart: always
    container_name: "extractor-service"
    network_mode: host
    depends_on:
    - kafka
    volumes:
    - '../knowledge-vault/extractor-service/src/main/resources/:/knowledge-vault/extractor-service/src/main/resources/'
    ports:
    - "8094:8094"
    expose:
    - "8094"

  input-processor:
    image: input-processor:v1
    build:  input-processor/
    restart: always
    container_name: "input-processor"
    network_mode: host
    depends_on:
    - kafka
    ports:
    - "8093:8093"
    expose:
    - "8093"

  paragraph-processor:
    image: paragraph-processor:v1
    build: paragraph-processor/
    restart: always
    container_name: "paragraph-processor"
    network_mode: host
    depends_on:
    - kafka
    ports:
    - "8433:8433"
    expose:
    - "8433"

  paragraph-tokenizer:
    image: paragraph-tokenizer:v1
    build: paragraph-tokenizer/
    restart: always
    container_name: "paragraph-tokenizer"
    network_mode: host
    depends_on:
    - kafka
    ports:
    - "8065:8065"
    expose:
    - "8065"

  populator:
    image: populator:v1
    build: populator/
    restart: always
    container_name: "populator"
    network_mode: host
    depends_on:
    - kafka
    - neo4j
    ports:
    - "8067:8067"
    expose:
    - "8067"

#  user-registration:
#    image: user-registration
#    build: user-registration-service/
#    container_name: user-registration
#    network_mode: host
#    ports:
#      - "8083:8083"
#    expose:
#      - "8083"

#  user-authentication:
#    image: user-authentication
#    build: user-authentication-service/
#    container_name: user-registration-container
#    network_mode: host
#    ports:
#      - "5084:8080"
#    expose:
#      - "5084"

#  gateway:
#    image: zuulgateway:v1
#    build: zuulgateway/
#    restart: always
#    container_name: zuul-container
#    network_mode: host
#    depends_on:
#    - mongodb
#    ports:
#    - 8081:8081
#    expose:
#    - 8081
